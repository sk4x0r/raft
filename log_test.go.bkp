package raft

import (
	"testing"
	"log"
	"os"
)

func TestLog(t *testing.T) {
	os.Remove("5001_log_entries.log")
	l:=newLog(5001)
	if l.CurrentIndex()!=0{
		t.Fatalf("Incorrect log.CurrentIndex",l.CurrentIndex())
	}
	if l.CurrentTerm()!=0{
		t.Fatalf("Incorrect log.CurrentTerm",l.CurrentTerm())
	}
	if l.CommitIndex()!=-1{
		t.Fatalf("Incorrect log.CommitIndex",l.CommitIndex())
	}
	index, term :=l.lastInfo()
	if index!=-1{
		t.Fatalf("Incorrect log.entry.index",index)
	}
	if term!=-1{
		t.Fatal("Incorrect log.entry.term",term)
	}
	err:=l.appendEntry(newLogItem(0,1,"test_data"))
	if err!=nil{
		t.Fatal("Unable to append an entry to log")
	}
	var e []*LogItem
	l1:=newLogItem(1,2,"abc")
	l2:=newLogItem(2,3,"xyz")
	l3:=newLogItem(3,4,"pqr")
	e=append(e,l1)
	e=append(e,l2)
	e=append(e,l3)
	err=l.appendEntries(e)
	if err!=nil{
		t.Fatal("Unable to append slice of entries to log")
	}
	/*
	log.Println(l.CommitIndex())
	l.setCommitIndex(-3)
	log.Println(l.CommitIndex())
	l.setCommitIndex(1)
	log.Println(l.CommitIndex())
	l.setCommitIndex(100)
	log.Println(l.CommitIndex())
	l.setCommitIndex(1)
	log.Println(l.CommitIndex())
	
	en:=l.entries
	log.Println("before")
	for _,e := range en{
		log.Println(e)
	}
	l.truncate(1,2)
	en=l.entries
	log.Println("after")
	for _,e := range en{
		log.Println(e)
	}
	*/
	log.Println("EntriesAfter 0")
	en:=l.getEntriesAfter(0)
	
	for _,e := range en{
		log.Println(e)
	}
	log.Println("EntriesAfter 1")
	en=l.getEntriesAfter(1)
	
	for _,e := range en{
		log.Println(e)
	}
	log.Println("EntriesAfter 2")
	en=l.getEntriesAfter(2)
	
	for _,e := range en{
		log.Println(e)
	}
	
	log.Println("EntriesAfter -1")
	en=l.getEntriesAfter(-1)
	
	for _,e := range en{
		log.Println(e)
	}
}
